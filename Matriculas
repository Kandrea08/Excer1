package com.pruebas.proyect2;

import java.util.ArrayList;
import java.util.Scanner;

class Account {
    private String name;
    private String accountNumber;
    private double balance;

    public Account(String name, String accountNumber, double balance) {
        this.name = name;
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    // Métodos para depositar y retirar dinero
    public void deposit(double amount) {
        balance += amount;
    }

    public void withdraw(double amount) {
        balance -= amount;
    }

    // Otros métodos para obtener información de la cuenta
    public String getName() {
        return name;
    }

    public String getAccountNumber() {
        return accountNumber;
    }

    public double getBalance() {
        return balance;
    }
}

class Bank {
    private ArrayList<Account> accounts = new ArrayList<>();

    // Métodos para agregar y eliminar cuentas
    public void addAccount(Account account) {
        accounts.add(account);
    }

    public void removeAccount(Account account) {
        accounts.remove(account);
    }

    // Método para realizar transferencias
    public void transfer(Account from, Account to, double amount) {
        from.withdraw(amount);
        to.deposit(amount);
    }

    // Método para realizar operaciones bancarias
    public void processMonthlyFee() {
        for (Account account : accounts) {
            double fee = 0.0;
            if (account instanceof SavingsAccount) {
                fee = ((SavingsAccount) account).calculateMonthlyFee();
            } else if (account instanceof CurrentAccount) {
                fee = ((CurrentAccount) account).calculateMonthlyFee();
            }
            account.withdraw(fee);
        }
    }

    public ArrayList<Account> getAccounts() {
        return accounts;
    }
}

class SavingsAccount extends Account {
    private double interestRate;

    public SavingsAccount(String name, String accountNumber, double balance, double interestRate) {
        super(name, accountNumber, balance);
        this.interestRate = interestRate;
    }

    public double calculateMonthlyFee() {
        return 0.0; // No monthly fee for savings account
    }

    public void addInterest() {
        double interest = getBalance() * (interestRate / 12);
        deposit(interest);
    }
}

class CurrentAccount extends Account {
    private static final double MIN_OPENING_BALANCE = 200000;
    private static final double MAINTENANCE_RATE = 0.015;
    private static final double CHECK_ISSUE_FEE = 3000;
    private static final double[] DEPOSIT_FEES = {7000, 5000, 4000, 0.033};
    private static final double[] DEPOSIT_THRESHOLDS = {500000, 2000000, 10000000};

    public CurrentAccount(String name, String accountNumber, double balance) {
        super(name, accountNumber, balance);
    }

    public double calculateMonthlyFee() {
        double fee = getBalance() * MAINTENANCE_RATE;
        if (getBalance() < MIN_OPENING_BALANCE) {
            fee += MIN_OPENING_BALANCE - getBalance();
        }
        return fee;
    }

    public void issueCheck(double amount) {
        if (getBalance() >= amount) {
            withdraw(amount);
            withdraw(CHECK_ISSUE_FEE);
        } else {
            System.out.println("Insufficient funds to issue check.");
        }
    }

    public void deposit(double amount) {
        super.deposit(amount);
        double fee = 0.0;
        for (int i = 0; i < DEPOSIT_THRESHOLDS.length; i++) {
            if (amount >= DEPOSIT_THRESHOLDS[i]) {
                fee = DEPOSIT_FEES[i];
                if (i == DEPOSIT_THRESHOLDS.length - 1) { // For the last threshold
                    fee = amount * DEPOSIT_FEES[i];
                }
                break;
            }
        }
        super.withdraw(fee);
    }
}

public class Ejercicio3 {
    public static void main(String[] args) {
        Bank bank = new Bank();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Menu:");
            System.out.println("1. Apertura de Cuenta");
            System.out.println("2. Transferencias");
            System.out.println("3. Cajero Automático");
            System.out.println("4. Cierre de Mes");
            System.out.println("5. Salir");
            System.out.print("Seleccione una opción: ");
            int option = scanner.nextInt();

            switch (option) {
                case 1:
                    openAccount(bank, scanner);
                    break;
                case 2:
                    performTransfer(bank, scanner);
                    break;
                case 3:
                    useATM(bank, scanner);
                    break;
                case 4:
                    bank.processMonthlyFee();
                    printAccountStatements(bank);
                    break;
                case 5:
                    System.out.println("Saliendo del programa...");
                    System.exit(0);
                    break;
                default:
                    System.out.println("Opción inválida. Inténtelo de nuevo.");
            }
        }
    }

    private static void openAccount(Bank bank, Scanner scanner) {
        System.out.println("Ingrese los datos del cliente:");
        System.out.print("Nombres: ");
        String firstName = scanner.next();
        System.out.print("Apellidos: ");
        String lastName = scanner.next();
        System.out.print("Edad: ");
        int age = scanner.nextInt();

        String name;
        if (age < 18) {
            System.out.print("Nombres del Representante: ");
            name = scanner.next();
            System.out.print("Apellidos del Representante: ");
            name += " " + scanner.next();
        } else {
            name = firstName + " " + lastName;
        }

        System.out.print("Número de cuenta: ");
        String accountNumber = scanner.next();
        System.out.print("Tipo de cuenta (Ahorro/Corriente): ");
        String accountType = scanner.next();
        System.out.print("Monto de apertura: ");
        double openingBalance = scanner.nextDouble();

        Account account;
        if (accountType.equalsIgnoreCase("Ahorro")) {
            System.out.print("Tasa de interés anual: ");
            double interestRate = scanner.nextDouble();
            account = new SavingsAccount(name, accountNumber, openingBalance, interestRate);
        } else if (accountType.equalsIgnoreCase("Corriente")) {
            account = new CurrentAccount(name, accountNumber, openingBalance);
        } else {
            System.out.println("Tipo de cuenta no válido.");
            return;
        }

        bank.addAccount(account);
        System.out.println("Cuenta abierta con éxito.");
    }

    private static void performTransfer(Bank bank, Scanner scanner) {
        System.out.println("Ingrese los detalles de la transferencia:");
        System.out.print("Número de cuenta de origen: ");
        String fromAccountNumber = scanner.next();
        System.out.print("Número de cuenta de destino: ");
        String toAccountNumber = scanner.next();
        System.out.print("Monto a transferir: ");
        double amount = scanner.nextDouble();

        Account fromAccount = findAccountByNumber(bank, fromAccountNumber);
        Account toAccount = findAccountByNumber(bank, toAccountNumber);

        if (fromAccount == null) {
            System.out.println("La cuenta de origen no existe.");
        } else if (toAccount == null) {
            System.out.println("La cuenta de destino no existe.");
        } else {
            bank.transfer(fromAccount, toAccount, amount);
            System.out.println("Transferencia realizada con éxito.");
        }
    }

    private static Account findAccountByNumber(Bank bank, String accountNumber) {
        for (Account account : bank.getAccounts()) {
            if (account.getAccountNumber().equals(accountNumber)) {
                return account;
            }
        }
        return null;
    }

    private static void useATM(Bank bank, Scanner scanner) {
        System.out.println("Ingrese el número de cuenta:");
        String accountNumber = scanner.next();
        System.out.print("Ingrese el monto a retirar: ");
        double amount = scanner.nextDouble();

        Account account = findAccountByNumber(bank, accountNumber);
        if (account != null) {
            // Simplemente retiramos el dinero de la cuenta
            account.withdraw(amount);
            System.out.println("Retiro realizado con éxito.");
        } else {
            System.out.println("La cuenta no existe.");
        }
    }

    private static void printAccountStatements(Bank bank) {
        System.out.println("Estado de cuentas:");
        for (Account account : bank.getAccounts()) {
            System.out.println("Cuenta: " + account.getAccountNumber());
            System.out.println("Titular: " + account.getName());
            System.out.println("Saldo: " + account.getBalance());
            System.out.println("-----------------------------------");
        }
    }
}
